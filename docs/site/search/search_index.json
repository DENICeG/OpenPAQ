{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>OpenPAQ (OpenPostal Address Quality) is a tool to validate parts of a postal address. Therefore, it provides an HTTP-API endpoint to provide the relevant data. </p> <p>Actually following data will be checked and validated:</p> <ul> <li>street</li> <li>city</li> <li>postal code</li> <li>country code</li> </ul> <p>OpenPAQ use a Nominatim service in the background to check the addresses. Actually OpenPAQ is tested with a self-hosted version and with the API from openstreetmap.org.</p> <p></p> <ul> <li> <p> Set up in 2 minutes</p> <p>Download container and set up a minimal instance</p> <p> Getting started</p> </li> <li> <p> Customize configuration</p> <p>Adjust the configuration to your needs</p> <p> Installation</p> </li> <li> <p> What does this mean?</p> <p>Get further information what the response of a request mean and how to interpret it</p> <p> Customization</p> </li> <li> <p> Code, Code, Code...</p> <p>Here you get a deeper explanation about the code and how things are realized </p> <p> Development</p> </li> <li> <p> You want to help?!</p> <p>All about how to contribute to the project</p> <p> Contribution</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"contributions/","title":"Contributing to OpenPAQ","text":"<p>Thank you for your interest in contributing to OpenPAQ!</p> <p>We welcome all kinds of contributions \u2014 whether you're reporting bugs, suggesting features, or submitting pull requests. However, please note that GitHub Issues and Pull Requests are currently disabled while we finalize an initial version of the project.  Once we're ready, we'll announce the opening of community contributions on the project page.</p>"},{"location":"contributions/#general-guidelines","title":"General Guidelines","text":"<p>Once contributions are open, please follow the guidelines below.</p>"},{"location":"contributions/#1-creating-issues","title":"1. Creating Issues","text":"<p>When submitting an issue (bug report, feature request, or refactoring proposal), please make sure to:</p> <ul> <li>Provide a clear rationale \u2014 explain why this change or suggestion is meaningful.</li> <li>Include examples or use cases to help understand the context and benefit.</li> <li>Use one of the following tags in the issue title:<ul> <li><code>[Bug]</code> \u2014 for bugs or regressions</li> <li><code>[Feature]</code> \u2014 for new capabilities</li> <li><code>[Refactor]</code> \u2014 for internal structural improvements</li> </ul> </li> </ul>"},{"location":"contributions/#example-issue","title":"Example Issue","text":"<p>Title: [Feature] Better matches for Belgian addresses</p> <p>Description: In order to better match some Belgian addresses a new normalizer for \"be\" is added and registered</p> <p>\"Abbreviations in streetnames\"</p> <p>Straat --&gt; Str.</p> <p>Laan --&gt; Ln</p>"},{"location":"contributions/#2-submitting-pull-requests-prs","title":"2. Submitting Pull Requests (PRs)","text":"<p>Once pull requests are enabled:</p> <ul> <li>Make sure your PR has a clear, focused scope.</li> <li>Keep code clean and readable.</li> <li>Include tests and documentation if applicable.</li> <li>Ensure existing tests pass.</li> <li>Reference any related issue (e.g., <code>Fixes #42</code>).</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#build-the-project","title":"build the project","text":"<pre><code>go build  -o openPAQ -a ./cmd/main.go\n</code></pre>"},{"location":"development/#build-the-container","title":"build the container","text":"<pre><code>docker build -t openpaq:latest .\n</code></pre>"},{"location":"development/#run-the-project","title":"run the project","text":"<pre><code>CACHE_ENABLED=false \\\nVERSION=testing \\\nCLICKHOUSE_ENABLED=false \\\nUSE_TLS=false \\\nUSE_JWT=false \\\nNOMINATIM_ADDRESS=https://nominatim.openstreetmap.org/search \\\nLOG_LEVEL=debug \\\nWEBSERVER_LISTEN_ADDRESS=:8001 \\\ngo run ./cmd/main.go\n</code></pre>"},{"location":"development/#program-flow","title":"Program flow","text":"<pre><code>flowchart TD\n    A1[User] --&gt; A2[API Request]\n\n    A2 --&gt; A3[\"normlize input\n    (country specific)\"]\n\n    A3 --&gt; A4{ exists a country code specific listmatcher }\n\n    subgraph LISTMATCHER_NOT_EXISTS\n        S1_1[request nominatim] --&gt; S1_2[normalize response]\n        S1_2 --&gt; S1_3[calculate match]\n        S1_3 --&gt; S1_4[response match]\n        end\n\n        subgraph LISTMATCHER_EXISTS\n\n        S2_1[request nominatim] --&gt; S2_2[normalize response]\n        S2_2 --&gt; S2_3[calculate match]\n\n        S2_10[lookup in list] --&gt; S2_11[normalize response]\n        S2_11 --&gt; S2_12[calculate match]\n\n        S2_3 --&gt; S20_1[response combined best match]\n        S2_12 --&gt; S20_1\n\n    end\n\n    A4 --- YES ---&gt; LISTMATCHER_EXISTS\n    A4 --- NO ---&gt; LISTMATCHER_NOT_EXISTS\n\n    LISTMATCHER_EXISTS--&gt;A5[API Response]\n    LISTMATCHER_NOT_EXISTS--&gt;A5[API Response]</code></pre>"},{"location":"development/#add-a-normalizer","title":"Add a normalizer","text":""},{"location":"development/#create-normalizer","title":"Create normalizer","text":"<p>A normalizer must implement following interface:</p> <pre><code>type Normalize interface {\n  GetCountryCode() string\n  City(string) (string, error)\n  PostalCode(string) (string, error)\n  Street(string) ([]string, error)\n}\n</code></pre> <p>A good starting point for a reference implementation is located at <code>internal/normalization/generic.go</code>. This is a very minimal normalizer which will be used if no specific normalizer is registered for the provided  country code.</p>"},{"location":"development/#register-normalizer","title":"Register normalizer","text":"<p>To register a new normalizer, it needs do be added in the function <code>internal/normalization/normalize.go:NewNormalizer</code></p>"},{"location":"getting_started/","title":"Getting started","text":"<p>In this section we'll start an OpenPAQ instance with a minimalistic configuration.  All advanced features are disabled, and it will use the openstreetmap.org as backend.</p> <p>Warning</p> <p>Please read the usage policies of openstreetmap.org before starting the configuration and usage</p>"},{"location":"getting_started/#minimal-configuration","title":"Minimal configuration","text":"<pre><code>docker run \\\n-e CACHE_ENABLED=false \\\n-e VERSION=testing \\\n-e CLICKHOUSE_ENABLED=false \\\n-e USE_TLS=false \\\n-e USE_JWT=false \\\n-e NOMINATIM_ADDRESS=https://nominatim.openstreetmap.org/search \\\n-e LOG_LEVEL=debug \\\n-e WEBSERVER_LISTEN_ADDRESS=:8001 \\\n-p 8001:8001 \\\nghcr.io/DENICeG/OpenPAQ:latest\n</code></pre>"},{"location":"getting_started/#example-request","title":"Example Request","text":"<p>Run your first request against your new OpenPAQ instance:</p> without debug detailswith debug details <pre><code>curl http://127.0.0.1:8001/api/v1/check\\\n?street=Theodor-Stern-Kai\\\n&amp;postal_code=60596\\\n&amp;city=Frankfurt\\\n&amp;country_code=DE\\\n&amp;debug_details=false\n</code></pre> <pre><code>curl http://127.0.0.1:8001/api/v1/check\\\n?street=Theodor-Stern-Kai\\\n&amp;postal_code=60596\\\n&amp;city=Frankfurt\\\n&amp;country_code=DE\\\n&amp;debug_details=true\n</code></pre>"},{"location":"getting_started/#example-response","title":"Example Response","text":"<p>Congratulation you should get your first response which should look like this:</p> without debug detailswith debug details <pre><code>{\n    \"street\": \"Theodor-Stern-Kai\",\n    \"city\": \"Frankfurt\",\n    \"postal_code\": \"60596\",\n    \"country_code\": \"de\",\n    \"street_matched\": true,\n    \"city_matched\": true,\n    \"postal_code_matched\": true,\n    \"city_to_postal_code_matched\": true,\n    \"country_code_matched\": true,\n    \"version\": \"testing\",\n\n}\n</code></pre> <pre><code>{\n    \"street\": \"Theodor-Stern-Kai\",\n    \"city\": \"Frankfurt\",\n    \"postal_code\": \"60596\",\n    \"country_code\": \"de\",\n    \"street_matched\": true,\n    \"city_matched\": true,\n    \"postal_code_matched\": true,\n    \"city_to_postal_code_matched\": true,\n    \"country_code_matched\": true,\n    \"version\": \"testing\",\n    \"details\": {\n        \"parameters\": {\n            \"matching_algorithm\": 0,\n            \"matching_threshold\": 0,\n            \"AllowPartialMatch\": false,\n            \"AllowPartialCompareListMatch\": false,\n            \"partial_matching_algorithm\": 0,\n            \"partial_matching_threshold\": 0,\n            \"PartialInputSeparators\": null,\n            \"PartialExcludeWords\": null,\n            \"PartialCompareListSeparators\": null,\n            \"AllowCombineAllForwardCombinations\": false,\n            \"allowed_amount_of_changed_chars\": 0\n        },\n        \"city_street_matches\": [\n            {\n                \"city\": \"frankfurt am main\",\n                \"street\": \"theodor stern kai\",\n                \"postal_code\": \"60596\",\n                \"country_code\": \"de\",\n                \"street_similarity\": 1,\n                \"was_partial_street_match\": false,\n                \"city_similarity\": 0.5294118,\n                \"was_partial_city_match\": true,\n                \"was_list_match\": false\n            },\n            {\n                \"city\": \"frankfurt am main\",\n                \"street\": \"theodor stern kai\",\n                \"postal_code\": \"60528\",\n                \"country_code\": \"de\",\n                \"street_similarity\": 1,\n                \"was_partial_street_match\": false,\n                \"city_similarity\": 0.5294118,\n                \"was_partial_city_match\": true,\n                \"was_list_match\": false\n            },\n            {\n                \"city\": \"frankfurt\",\n                \"street\": \"theodor stern kai\",\n                \"postal_code\": \"60596\",\n                \"country_code\": \"de\",\n                \"street_similarity\": 1,\n                \"was_partial_street_match\": false,\n                \"city_similarity\": 1,\n                \"was_partial_city_match\": false,\n                \"was_list_match\": false\n            },\n            {\n                \"city\": \"frankfurt\",\n                \"street\": \"theodor stern kai\",\n                \"postal_code\": \"60528\",\n                \"country_code\": \"de\",\n                \"street_similarity\": 1,\n                \"was_partial_street_match\": false,\n                \"city_similarity\": 1,\n                \"was_partial_city_match\": false,\n                \"was_list_match\": false\n            }\n        ],\n        \"postal_code_street_matches\": [\n            {\n                \"postal_code\": \"60596\",\n                \"street\": \"theodor stern kai\",\n                \"country_code\": \"de\",\n                \"street_similarity\": 1,\n                \"was_partial_street_match\": false,\n                \"was_list_match\": false\n            }\n        ],\n        \"city_postal_code_matches\": [\n            {\n                \"city\": \"frankfurt am main\",\n                \"postal_code\": \"60596\",\n                \"country_code\": \"de\",\n                \"city_similarity\": 0.5294118,\n                \"was_partial_city_match\": true,\n                \"was_list_match\": false\n            },\n            {\n                \"city\": \"frankfurt\",\n                \"postal_code\": \"60596\",\n                \"country_code\": \"de\",\n                \"city_similarity\": 1,\n                \"was_partial_city_match\": false,\n                \"was_list_match\": false\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>There are mainly two options to get OpenPAQ running. The first option is to compile the code and run the binary directly. This will be described in the development documentation in detail. This section will focus on the available docker  container. The container is available here.</p>"},{"location":"installation/#overview-environment-variables","title":"Overview Environment variables","text":"<p>Since OpenPAQ is designed for container environments, all configuration settings are set via environment variables. An Overview over all available settings are listed in the table below.</p> Variable name Example Input Required Description CLICKHOUSE_ENABLED false x Enables the loading of street lists out of a clickhouse db server (if you want to use only nominatim set it to false) CLICKHOUSE_DB_USERNAME default User for clickhouse connection CLICKHOUSE_DB_PASSWORD prettypassword Passwort for clickhouse connection CLICKHOUSE_DB_HOST clickhouse.server.de Hostname for clickhouse connection without port CLICKHOUSE_DB_PORT 9000 Port for clickhouse connection CLICKHOUSE_DB_DATABASE address Database in which the street lists are stored CLICKHOUSE_DB_TABLE lists Table for street list of germany for list matching USE_TLS false x Enables TLS encryption to use HTTPS instead of HTTP TLS_KEY_FILE_PATH /cert/key.pem Path to the secret key file TLS_CERT_FILE_PATH /cert/cert.pem Path to the certificate file USE_JWT true x To secure the usage of the api it is possible and recommended to use jwt tokens for authorization JWT_SIGNING_KEY a-string-secret-at-least-256-bits-long Signing Key for jwt WEBSERVER_LISTEN_ADDRESS 127.0.0.1:8001 Address OpenPAQ binds on NOMINATIM_ADDRESS https://nominatim.openstreetmap.org/search x Address CACHE_ENABLED false x Use a memcache CACHE_URL localhost:11211 URL to the memcache VERSION 5.0.4 x The name of the actual version. This version is included in the response and can be used from other programs LOG_LEVEL Info x"},{"location":"installation/#configure-clickhouse","title":"Configure Clickhouse","text":"<p>If you want to use the list matching mechanism a clickhouse configuration is needed. Actually a listmatcher for germany is implemented and can be used out of the box. Therefor you have to create a table with the described schema below. Afterward you have to fill the table with data of a source of your choice. There are several benefits by using a listmatcher: - The results maybe more accurate since the areas and postal codes in nominatim are calculated and not hard defined. - The request maybe faster, depending on your hardware configuration </p>"},{"location":"installation/#schema-for-german-listmatcher","title":"Schema for german listmatcher","text":"<p>This is an example query to create a lockup table for a german street list.</p> <pre><code>CREATE TABLE default.street_list_germany\n(\n    `id` UInt32,\n    `bundesland_name` LowCardinality(String),\n    `regierungsbezirk_name` String,\n    `kreis_name` String,\n    `kreis_typ` LowCardinality(String),\n    `gemeinde_name` String,\n    `gemeinde_typ` LowCardinality(String),\n    `ort_name` String,\n    `ort_lat` Float64,\n    `ort_lon` Float64,\n    `postleitzahl` String,\n    `strasse_name` String\n)\nENGINE = ReplicatedMergeTree('/clickhouse/lookup_tables/tables/{layer}-{shard}/street_list_germany_v2',\n '{replica}')\nPARTITION BY substring(strasse_name,\n 1,\n 1)\nORDER BY (bundesland_name,\n ort_name,\n postleitzahl,\n strasse_name)\nSETTINGS index_granularity = 8192;\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>After setting up the database, the clickhouse database must be enabled in OpenPAQ by setting following environment variables:</p> <ul> <li>CLICKHOUSE_ENABLED=true</li> <li>CLICKHOUSE_DB_HOST=&lt;clickhouse host url&gt;</li> <li>CLICKHOUSE_DB_PORT=&lt;clickhouse native port&gt;</li> <li>CLICKHOUSE_DB_USERNAME=&lt;clickhouse user with read permissions&gt;</li> <li>CLICKHOUSE_DB_PASSWORD=&lt;clickhouse user password&gt;</li> <li>CLICKHOUSE_DB_PORT=&lt;clickhouse database name&gt;</li> <li>CLICKHOUSE_DB_PORT=&lt;clickhouse table name&gt;</li> </ul>"},{"location":"installation/#configure-ssltls","title":"Configure SSL/TLS","text":"<p>By default, OpenPAQ starts a HTTP server without any encryption. This is completely fine when you run OpenPAQ behind a reverse proxy which handles the TLS encryption. It is not recommended to run OpenPAQ without any encryption at all.</p> <p>To enable the HTTPS server of OpenPAQ following environment variables must be set:</p> <ul> <li>USE_TLS=true</li> <li>TLS_KEY_FILE_PATH=&lt;location of the keyfile in the container&gt;</li> <li>TLS_CERT_FILE_PATH=&lt;location of the certfile in the container&gt;</li> </ul>"},{"location":"installation/#example-configuration","title":"Example configuration","text":""},{"location":"installation/#generating-a-self-signed-certificate","title":"Generating a self-signed certificate","text":"<pre><code>openssl req -x509 \\\n-newkey rsa:4096 \\\n-keyout key.pem \\\n-out cert.pem \\\n-sha256 \\\n-days 3650 \\\n-nodes \\\n-subj \"/C=DE/ST=Hessen/L=Frankfurt am Main/O=Denic e.G./OU=DataScience/CN=OpenPAQ\"\n</code></pre>"},{"location":"installation/#run-openpaq-with-tls-enabled","title":"Run OpenPAQ with TLS enabled","text":"<pre><code>docker run \\\n-e CACHE_ENABLED=false \\\n-e VERSION=testing \\\n-e CLICKHOUSE_ENABLED=false \\\n-e USE_TLS=true \\\n-e TLS_KEY_FILE_PATH=/cert/key.pem \\\n-e TLS_CERT_FILE_PATH=/cert/cert.pem \\\n-e USE_JWT=false \\\n-e NOMINATIM_ADDRESS=https://nominatim.openstreetmap.org/search \\\n-e LOG_LEVEL=debug \\\n-e WEBSERVER_LISTEN_ADDRESS=:8001 \\\n-p 8001:8001 \\\n-v ./key.pem:/cert/key.pem \\\n-v ./cert.pem:/cert/cert.pem \\\nghcr.io/DENICeG/OpenPAQ:latest\n</code></pre>"},{"location":"installation/#configure-authentication","title":"Configure Authentication","text":"<p>In some use cases it is necessary to restrict the access to the API. Therefore, OpenPAQ provides a mechanism to protect the access with a JWT. To use this, following parameters must be set:</p> <ul> <li>USE_JWT=true</li> <li>JWT_SIGNING_KEY=&lt;any string without space, tabs or linebreaks which has at least 32 chars &gt;</li> </ul>"},{"location":"installation/#example","title":"Example","text":"<pre><code>docker run \\\n-e CACHE_ENABLED=false \\\n-e VERSION=testing \\\n-e CLICKHOUSE_ENABLED=false \\\n-e USE_TLS=false \\\n-e USE_JWT=true \\\n-e JWT_SIGNING_KEY=a-string-secret-at-least-256-bits-long \\\n-e NOMINATIM_ADDRESS=https://nominatim.openstreetmap.org/search \\\n-e LOG_LEVEL=debug \\\n-e WEBSERVER_LISTEN_ADDRESS=:8001 \\\n-p 8001:8001 \\\nghcr.io/DENICeG/OpenPAQ:latest\n</code></pre> <p>After setting up the service, it shouldn't be possible to access the API without a valid JWT.</p> <pre><code>curl http://127.0.0.1:8001/api/v1/check\\\n?street=Theodor-Stern-Kai\\\n&amp;postal_code=60596\\\n&amp;city=Frankfurt\\\n&amp;country_code=DE\\\n&amp;debug_details=false\n</code></pre> <p>The response should look like this</p> <pre><code>{\"message\":\"No token provided\"}\n</code></pre>"},{"location":"installation/#generating-an-access-token","title":"Generating an access token","text":"<p>There are several ways to generate JWTs. The easiest way is to use jwt.io. </p> <p>Now you just need to provide the generated token as Authorization header like this: </p> <pre><code>curl -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTc0NjI2NzUxN30.XqARRZ3xSery6SgLDjjPyR2IP2tldfNxbFI7cKOw1w0\" \\\nhttp://127.0.0.1:8001/api/v1/check\\\n?street=Theodor-Stern-Kai\\\n&amp;postal_code=60596\\\n&amp;city=Frankfurt\\\n&amp;country_code=DE\\\n&amp;debug_details=false\n</code></pre> <p>With the provided token you should get the expected result. </p>"},{"location":"installation/#configure-cache","title":"Configure Cache","text":"<p>In environments with a lot of requests, where the request equals a lot, traffic and response speed could increase significantly by using a caching mechanism. OpenPAQ is prepared to work with memcached.</p> <p>Memcached is a simple object storage with a small footprint.</p> <p>To spin up a very simple memcached service following command can be used:</p> <pre><code>docker run --rm \\\n--name my-memcache \\\n-p 11211:11211 \\\nmemcached \\\nmemcached --memory-limit=64\n</code></pre> <p>When the memcached daemon is running, you can start OpenPAQ and enjoy the insane speed of the cache.</p> <pre><code>docker run \\\n-e CACHE_ENABLED=true \\\n-e CACHE_URL=localhost:11211 \\\n-e VERSION=testing \\\n-e CLICKHOUSE_ENABLED=false \\\n-e USE_TLS=false \\\n-e NOMINATIM_ADDRESS=https://nominatim.openstreetmap.org/search \\\n-e LOG_LEVEL=debug \\\n-e WEBSERVER_LISTEN_ADDRESS=:8001 \\\n-p 8001:8001 \\\nghcr.io/DENICeG/OpenPAQ:latest\n</code></pre> <p>Info</p> <p>macOS and Windows docker environments are virtualized, so the hostname localhost does not work as expected.</p> <p>You may need to use the host IP instead of localhost as cache host.</p>"},{"location":"installation/#advanced-setup-self-hosted-nominatim","title":"Advanced setup - self-hosted nominatim","text":"<p>The limitation and policy of openstreetmap.org maybe a showstopper for some use cases with a high number of requests and automatically running agents.</p> <p>In these situations it may make sense to host your own nominatim server. OpenPAQ is battle test with the docker container mediagis/nominatim.</p>"},{"location":"installation/#example-configuration_1","title":"Example configuration","text":"<p>In this example a small area of germany is used. Be aware that the import of the whole world takes a lot of time and require a big amount of resources. See Nominatim docs for further information.</p> <pre><code>docker run -it \\\n  -e PBF_URL=https://download.geofabrik.de/europe/germany/hessen-latest.osm.pbf \\\n  -e REPLICATION_URL=https://https://download.geofabrik.de/europe/germany/hessen-updates/ \\\n  -p 8080:8080 \\\n  --name nominatim \\\n  mediagis/nominatim:5.1\n</code></pre> <p>Info</p> <p>macOS and Windows docker environments are virtualized, so the hostname localhost does not work as expected.</p> <p>You may need to use the host IP instead of localhost as cache host.</p> <pre><code>docker run \\\n-e CACHE_ENABLED=false \\\n-e VERSION=testing \\\n-e CLICKHOUSE_ENABLED=false \\\n-e USE_TLS=false \\\n-e NOMINATIM_ADDRESS=http://localhost:8080/search \\\n-e LOG_LEVEL=debug \\\n-e WEBSERVER_LISTEN_ADDRESS=:8001 \\\n-p 8001:8001 \\\nghcr.io/DENICeG/OpenPAQ:latest\n</code></pre>"},{"location":"license/","title":"License & EOL","text":""},{"location":"license/#license","title":"License","text":""},{"location":"license/#end-of-life","title":"End of life","text":"<p>DENIC maintains the OpenPAQ project as part of its operational infrastructure and reserves the right to discontinue maintenance with a minimum of 6 months prior notice should it no longer be required for DENIC's purposes.</p>"},{"location":"open_api/","title":"OpenAPI","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#interpretation-of-openpaqs-results","title":"Interpretation of OpenPAQ's results","text":"<p>OpenPAQ is a powerful tool for verifying the existence of arbitrary addresses worldwide. During the validation process, input addresses are first preprocessed using a set of country-specific rules.</p> <p>After preprocessing, each address is evaluated using three core contextual checks that help ensure the consistency and plausibility of its components:</p>"},{"location":"usage/#validation-checks","title":"Validation Checks","text":""},{"location":"usage/#1-streetpostal-code-check","title":"1. Street\u2013Postal Code Check","text":"<p>Is there a street within the specified postal code area that approximately matches the given street name?</p>"},{"location":"usage/#2-streetcity-check","title":"2. Street\u2013City Check","text":"<p>Does the specified city contain a street that approximately matches the given street name?</p>"},{"location":"usage/#3-citypostal-code-check","title":"3. City\u2013Postal Code Check","text":"<p>Is there a city within the specified postal code area that approximately matches the given city name?</p> <p>These checks leverage fuzzy matching to account for minor errors, variations, or misspellings in the input data.</p>"},{"location":"usage/#interpretation-of-validation-results","title":"Interpretation of Validation Results","text":"<p>For detailed implementation, API usage, or customization options, please refer to the relevant sections in this documentation.</p> <p>The results of the address validation checks can be interpreted as follows:</p>"},{"location":"usage/#street_matched-true-false","title":"<code>street_matched</code> (true / false)","text":"<p>Indicates whether the provided street is likely a valid component of the address. This value is derived by evaluating the following conditions:</p> <ul> <li>Street\u2013Postal Code Check</li> <li>Street\u2013City Check</li> </ul> <p>If at least one of these conditions returns a match, the street is considered valid and <code>street_matched</code> is set to <code>true</code>.</p>"},{"location":"usage/#postal_code_matched-true-false","title":"<code>postal_code_matched</code> (true / false)","text":"<p>Represents the likelihood that the given postal code is correct. This is determined using:</p> <ul> <li>Street\u2013Postal Code Check</li> <li>City\u2013Postal Code Check</li> </ul> <p>If either condition holds true, the postal code is deemed valid and <code>postal_code_matched</code> is <code>true</code>.</p>"},{"location":"usage/#city_matched-true-false","title":"<code>city_matched</code> (true / false)","text":"<p>Indicates whether the provided city is a valid part of the address, based on the following checks:</p> <ul> <li>Street\u2013City Check</li> <li>City\u2013Postal Code Check</li> </ul> <p>If at least one of the two conditions is fulfilled, <code>city_matched</code> will return <code>true</code>.</p>"},{"location":"usage/#city_to_postal_code_matched-true-false","title":"<code>city_to_postal_code_matched</code> (true / false)","text":"<p>Even if both <code>postal_code_matched</code> and <code>city_matched</code> return <code>true</code>, this does not necessarily mean the city and postal code are directly related. Therefore, this field explicitly checks:</p> <ul> <li>City\u2013Postal Code Check</li> </ul> <p>This helps confirm that the city is indeed located within the provided postal code area.</p>"},{"location":"usage/#country_code_matched-true-false","title":"<code>country_code_matched</code> (true / false)","text":"<p>All validation checks are scoped to specific countries. This value returns <code>true</code> if any valid match found during the checks belongs to the same country code as the input address.</p>"},{"location":"usage/#example-streetcity-check","title":"Example: Street\u2013City Check","text":"<p>The following example illustrates the logical evaluation of a Street\u2013City Check using Nominatim. It demonstrates how preprocessing input data is crucial to handle additional elements frequently included in addresses\u2014such as building names or extra descriptors.</p> <p>The preprocessing phase helps normalize these variations, correct common typing errors, and isolate the core address components. This ensures the system can extract and validate the true underlying address information effectively.</p> <pre><code>\nflowchart TD\n    %%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\n\n    A1[Input:\n    - DE\n    - Berlin Treptow\n    - Max Mustermann, Koepenicker Landstr 252\n    - 12437] --&gt; A2[DE Normalizer]\n\n    A2 --&gt; A3[Normalized Input:\n    - berlin treptow\n    - max mustermann\n    - koepenicker landstrasse\n    - 12437]\n\n    A3 --&gt; A4.1[Nominatim Request:\n    - search?q=berlin treptow, koepenicker landstrasse\n    \u26f3]\n\n    A3 --&gt; A4.2[Nominatim Request:\n    - search?q=berlin treptow, max mustermann]\n\n\n    A4.1 --&gt; A5[Nominatim Results:\n    - K\u00f6penicker Landstra\u00dfe\n    - Berlin]\n\n    A5 --&gt; A6[Normalize Nominatim Results:\n    - koepenicker Landstrasse\n    - graz]\n\n    A6 --&gt; A7[Fuzzy Comparison Street:\n    - Compare Input vs. Result\n    - Similarity: 0.8636364]\n\n    A7 --&gt; A8[Street-City-Check \u2705]\n\n    A8 --&gt; A9[Is street correct? \u2705]\n    A8 --&gt; A10[Is city correct? \u2705]\n</code></pre>"},{"location":"usage/#debug-information","title":"Debug Information","text":""},{"location":"usage/#parameter","title":"parameter","text":"<p>Validate the setup parameters of the program, that are used in the address evaluation process. These parameters for the moment are in the code, they will be customizable at a later stage.</p> <pre><code>{\n\"matching_algorithm\": 1,\n\"matching_threshold\": 0.8,\n\"AllowPartialMatch\": false,\n\"AllowPartialCompareListMatch\": false,\n\"partial_matching_algorithm\": 1,\n\"partial_matching_threshold\": 0.8,\n\"PartialInputSeparators\": null,\n\"PartialExcludeWords\": null,\n\"PartialCompareListSeparators\": null,\n\"AllowCombineAllForwardCombinations\": false,\n\"allowed_amount_of_changed_chars\": 0\n}\n</code></pre>"},{"location":"usage/#city_street_matches","title":"city_street_matches","text":"<p>Contains all results for the Street-City-Check and important meta information. The similarity values are the actual fuzzy similarities applying the utilized fuzzy distance algorithm between the result string and the initial input argument. partial_match indicates if argument matches just matches for a separated part of the argument. For example input city \"Frankfurt\" would state true for the result \"Frankfurt am Main\". For this reason, if partial matches are allowed for the given country, the similarity can be lower than the matching_threshold. was_list_match is an indicator that states whether the result was extracted due to list matching or detected by nominatim. If no list matcher is configured,  the field states always false and the result was found by nominatim.</p>"},{"location":"usage/#example-output-for-max-mustermann-koepenicker-landstr-252-12437-berlin-treptow-de","title":"Example output for <code>Max Mustermann, Koepenicker Landstr 252 12437 Berlin Treptow DE</code>","text":"<pre><code>[\n  {\n    \"city\": \"berlin\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12437\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.42857143,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  },\n  {\n    \"city\": \"treptow koepenick\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12437\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.23529412,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  },\n  {\n    \"city\": \"berlin\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12435\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.42857143,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  },\n  {\n    \"city\": \"treptow koepenick\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12435\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.23529412,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  },\n  {\n    \"city\": \"berlin\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12439\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.42857143,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  },\n  {\n    \"city\": \"treptow koepenick\",\n    \"street\": \"koepenicker landstra\u00dfe\",\n    \"postal_code\": \"12439\",\n    \"country_code\": \"de\",\n    \"street_similarity\": 0.8636364,\n    \"was_partial_street_match\": false,\n    \"city_similarity\": 0.23529412,\n    \"was_partial_city_match\": true,\n    \"was_list_match\": false\n  }\n]\n</code></pre>"},{"location":"usage/#postal_code_street_matches","title":"postal_code_street_matches","text":"<p>Contains all results for the Street-PostalCode-Check and important meta information.</p>"},{"location":"usage/#example-output-for-max-mustermann-koepenicker-landstr-252-12437-berlin-treptow-de_1","title":"Example output for <code>Max Mustermann, Koepenicker Landstr 252 12437 Berlin Treptow DE</code>","text":"<pre><code>[{\n\"postal_code\": \"12437\",\n\"street\": \"koepenicker landstra\u00dfe\",\n\"country_code\": \"de\",\n\"street_similarity\": 0.8636364,\n\"was_partial_street_match\": false,\n\"was_list_match\": false\n}]\n</code></pre>"},{"location":"usage/#city_postal_code_matches","title":"city_postal_code_matches","text":"<p>Contains all results for the City-PostalCode-Check and important meta information.</p>"},{"location":"usage/#example-output-for-max-mustermann-koepenicker-landstr-252-12437-berlin-treptow-de_2","title":"Example output for <code>Max Mustermann, Koepenicker Landstr 252 12437 Berlin Treptow DE</code>","text":"<pre><code>[{\n\"city\": \"berlin\",\n\"postal_code\": \"12437\",\n\"country_code\": \"de\",\n\"city_similarity\": 0.42857143,\n\"was_partial_city_match\": true,\n\"was_list_match\": false\n},\n{\n\"city\": \"treptow koepenick\",\n\"postal_code\": \"12437\",\n\"country_code\": \"de\",\n\"city_similarity\": 0.23529412,\n\"was_partial_city_match\": true,\n\"was_list_match\": false\n}]\n</code></pre>"}]}